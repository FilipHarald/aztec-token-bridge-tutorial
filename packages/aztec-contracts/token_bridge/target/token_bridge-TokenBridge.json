{"transpiled":true,"noir_version":"0.33.0+2d702155f9341cac08a960f271e3ed5450740729","name":"TokenBridge","functions":[{"name":"exit_to_l1_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_l1","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7Z3vruS2kcXfZT4bC/E/6VdZLAI7cYIBjHFgOwssDL/79mRa0r2Yyj190SwOVYdfEjuh2XWO54g/UVTpjw9/++nHf/3jLx8//f2X3z58/99/fPj5l7/+8PvHXz7d/u6PP7/78OOvH3/++eM//vLyf/6w/fs//sv5f/8Tv/3zh0+f/4fffv/h198/fL999+GnT3+7/fftn/77x59/+vB9dn/+z3efx4d3jo/vHJ/eOT6/c3x55/j6zvHtfeP99vD4774a5pJz95EuBXcMdrkIo6Nz6T46Oh/P0a4Ko7OP9T46+/x69JfK3VOVp3hUXiuo/FZt2Ef7ms/RoQmja9pNqc2/Gvulbn/RusNF644XrTtdtO48sO7gzrrLk3WXi9Zdp6j7Sy1tnlrCNlEtbqJa/ES1hIlqiRPVMvDaH7adylxw6NrvS7kP9u2sO233svOsZcfdb5/DObbtdZeL1l0vWne7Zt1xu2jd7qJ1+4vWHaa9fO+c72sT6o4XrXve5fLtuqddL0Hd066XoO5p10tQ97Tr5dt1p5HrpS9H3UFA6uQnqmXk9aodtUSXwL9Pl3LbR2d3FuKdv1eeJ628+v2PbY3bqz+JwlgXjrHSn9pCoLESaGz2NeaNQKMj0OgJNAYCjZFAIwEDZAIGyAQMkAkYoBAwQCFggELAAIWAAUok0DjrDkZPjQScUwg4pxBwTiHgnErAOZWAcyoB51QCzqkW1o7zgUcqm6DRwtoBNDYL15xU97GpRUGjhWsO0mjhmoM0RgKNFu6tkEYL91b5eGsiJ2F9bBbWR6TRwvqINFq4twIa3Wbh5gqKtEA6UKQF1IEiLbAOFBkZRFqgHSiSAHfcNi3v/Md9DGnmsL927kI6X2k/TkC6bVrk6StzWurpKtNNyz19ZU5LPn1lTss+fWVOSz99ZUYLMuO2nTMHSea0BNRX5rQM1FemCQrCMk1QEJZpgoKgTG+CgrBMExQUy/GGXnxRxwuZJigIyzRBQVhm5JBpg4KgTBsUBGXaoCAo0wQFJX/W8eJ15RcyTVAQlBlMUBCWaYKCsEwTFIRlmqAgLDNyyDRBQanlfea8NUmmCQrCMk1QEJZpg4KgTBsUhGRGGxQEZdqgICjzehR0L/x6XHMvPF618Ouxx73w69HEl8Kn7QPW8e0SZ6JlGBRJ8C6UM9E0DIq0cNobiTTRNgyKNPFeGxJp4sU2JNLEm21IZLRwRnjbJ87eSyJNnPZGIk2c9kYiTbzdhkSaIJ52igySSBPEA0SaaJIGRZogHiTSBPEgkSaIB4mM9l90dyY6pUGRJvZ4kEgTezxIpAniQSJNEA8QaaJdGhRJ0LvImWiYBkUSdC9yNTKIZCCeykA8Njr8IZEMxFMZiKcxEA9Dt0bH0K7RMfRrdAwNG32/zjctAZEl7U8RSzmfWKSjkjpNJW2WSvq1eHm6kqeu3TkdH43PuYBKYih7KTG0F9FxVXoOlo4P0ueUyqvR99KfuiLf9n+P0qGJPofjq6K3asDoeryjV19k08ewFx7GFZ7aUXhx8HK1Oef3yTeXzj8vt5r34uOVi09XLj5fufhy5eLrlYtvFy7+uS4g37p4d+Xi/ZWLv/IK+1x3jW9d/MQrbKpn8cW9Kl4Yf1LcbavqrCX4XenEy3FnpROv3Z2VTrzQd1Y6MRX0VRomRojOSidesjsrnXh976w00iilWU8DzXoaaNbTQLOeRpr1NE58/95ZKQ05RBpyeK7pw6WU0uw5RBpGijSMFGkYKdIwUqJhpETDSImGkRINI6VIo5SGHBINOSQackg05JBpyCHTkEOmIYdMQw7PtUa6lFIr66l3+Zjd5SgotbKeYqVW1lOotFhZT7FSK+spVmplPcVKrawyWKmVPXys1MqdOFZKs54WmvW00qynlWY9rTTrabVyf4qVRhqlNORQacih0uw5VBpGqjSM1GgYqdEwUqNhpEbDSM81grmUUhpGajSM1GjIobGQQ9hYyCFsLOQQNhZyCNu8117/onGB9/GV0nvx895y4uLdvNeN29O6s/iawZ+xt8ffxc576VAQO+/VQ0HsvLceCmIjk9h5b0AUxE68DvYXO/G62V/svPdcCmLnve3qL3biRnMKYpkIauJGdgpimQhq4kZ5CmKZCGri3noKYpkIauIOewpimQhq4j577xPrb4+199lvm01/frXPGazgE1ZqhZ28L9up1AtKrSyvPoX9kyO3v6yCUitrK1ZqZWHFSq2sqliplSUVKp24z15vpWbWU6jUzHoKlVrZiMBKI41SGkaauM9eb6U05DBx97nOSifuPtdbqZlVptbjTrxt20ulXw++AdPesuO2+gg3sxO3NfumtphZv/raYmax62uLmd2DvraYAYa+tpihi662TNzO7pvaYmbHo68tZrZH+tpCuUBXv3/lunoB/SduS/ftTCmU90PteIrZhAaGYeImWt/QFMr4uM1t59xBsIWSbrEtlHQLbZm4GdY3tYWSbrEtlHSLbaFkFmxLXLZItlDu4WJbKG8RsS2klFuOwp0XNhQmbjr2TW0hpVxgy8TtzL6pLaSUi2whpVxkCynlIlviskWyhZRykS2klItsWZQr2rIoV7RlUa5gS5y49d43tWVRrmjLolzRlkW5oi1x2SLZwkm5/iz8ZTfH0xZOyoW2cFIutIWTcqEtnJSLbDHTKLazLZyUC23hpFxoCyflQlsWzom2LJwTbVk4J9qycE60ZeGcZIuZrrWdbVk4J9qycE60ZeGcaAvpAp1OW1IRbCFdoIEtdnpivs+Wc25fnWAL6SUX2UJ6yUW2xGWLZAvpxgKyhXRjAdlCyi3IFlJuQbaQbiwAW+w0n+1ry6Jc0ZZFuaIti3JFW+KyRbKFgHLvSgnA9a6UgEXvSgnw8q6UgBi/KLXTRxgqJeC6u1ICVLsrJaCvu9JIo5SGkRiaMt+V0jCSna6vLedDaZGUmllloFIzV6RW23142DbhbR07XWihUjNXJKjUzF0bVGrmrg0pLWbu2qBSO+spUmpnPUVKzdy1QaXRiNKyU29JgkorfPS2Sits9LZKK1z0tkorTPS2Sis89KZKMw2631ZphYPeVmmFgd5WaYV/3lYZKVRSUIGZHstvq6SgAjMdkN9UaaahcTjf4Qo+ZEGpFTLASq3QAVZqhRCw0kij1MouCVZqhYmQ0mSmoWjwqR5KsxeU2lllkFIzV6TgDqUhJEGpmSsSVGrmigSVWrlTw0qt3K1hpVbu2KBSM60LsVIz6ylUauauDSo1c9cGlUYzSuv5XfZNUmqHkZBSO4yElNphJKTUDiMhpWYYKbpTaRTuT800vsNKzZADVGqGHKDSSKPUDDlApWbIASo1Qw5QqRlygEppyCGY2V2BSmkYyUzzSayUhpHMtIjESmkYyUwjR6yUhpHMtFvESmkYyUxTRKyUhpHMtC7ESmkYyUyDQaz0KUYq2/4kz5UUXtV+nz7rTl90p6+60zfV6Z9rvoand7rTe93pg+70UXd63dQm3dQm3dQm3dQm3dRm3dRm3dRm3dRm3dRm3dRm3dRm3dRm3dRm3dRm3dQW3dQW3dQW3dQW3dQW3dQW3dQW3dQW3dQW3dQW3dRW3dRW3dRW3dRW3dRW3dRW3dRW3dRW3dRW3dRW3dQ23dQ23dQ23dQ23dQ23dQ23dQ23dQ23dQ23dQ21dTmbdOd3ulO73WnD7rTR93pk+70WXf6ojt91Z1eN7VON7VON7VON7VON7VON7VON7VON7VON7VON7VON7VeN7VeN7VeN7VeN7VeN7VeN7VeN7VeN7VeN7VeN7VBN7VBN7VBN7VBN7VBN7VBN7VBN7VBN7VBN7VBN7VRN7VRN7VRN7VRN7VRN7W6Z6Oy7tmorHs2KuuejcrPnY2qx6k3V+P2anrpvF7e570NeHFer4R7Mc+dpKr50FpfHNiTi4m+7KPjy+N97vPRwK9G3y5u+ycibleK+Gr0vfSnrh81lrN0dDYxtr1lavJZctE/9680nqU04U/Mcye68PRRd/qkO33Wnb7oTl91p2+q0z93ogtP73Sn101t1k1t1k1t1k1t1k1t1k1t1k1t1k1t0U1t0U1t0U1t0U1t0U1t0U1t0U1t0U1t0U1t0U1t1U1t1U1t1U1t1U1t1U1t1U1t1U1t1U1t1U1t1U1t001t001t001t001t001t001t001t001t001tU01t2Tbd6Z3u9F53+qA7fdSdPulOn3WnL7rTV93pdVPrdFPrdFPrdFPrdFPrdFPrdFPrdFPrdFPrdFPrdFPrdVPrdVPrdVPrdVPrdVPrdVPrdVPrdVPrdVPrdVMbdFMbdFMbdFMbdFMbdFMbdFMbdFMbdFMbdFMbdFMbdVMbdVMbdVMbdVMbdVMbdVMbdVMbdVMbdVMbdVObdFObdFOrezaq6J6NKrpno4ru2aiiezaq6J6NKrpno4ru2aiiezaq6J6NKrpno4ru2aiiezaq6J6NKrpno4ru2aiiezaq6J6NKrpno4ru2aiiezaq6J6NKvLZKOf8ceLdxQh+xB8ntV1w5fyRz58++2p0ymUvPt2edZ+jxRPpKfnjFHhK6Px6zXWXW4t/PfouN3PJLVxyK5fcRiVXPoxnV67jkuu55AZZbj4UuIbkhm075PrzRbPP6/zX9YeS9/pDK0it98don5A3NcX9X1JNbZPUJiq1mUptoVJbqdQ2JrVtG632mDlFh+q//fau1rX08r3i/V6uuYvX7y9ef7h4/fHi9aeL158vXn8PEsjHx45CqS/rv/9GHfAbTf036rYN+A034Df8gN8IA34jDviNNOA38oDfKAN+ow74jQE5dwNy7gbk3A3IuRuQczcg525Azt2AnLsBOXcDcu4G5NwPyLkfkHM/IOd+QM79gJz7ATn3A3LuB+TcD8i5H5DzMCDnYUDOw4CchwE5DwNyHgbkPAzIeRiQ8zAg52FAzuOAnMcBOY8Dch4H5DwOyHkckPM4IOdxQM7jgJzHATlPA3KeBuQ8Dch5GpDzNCDnaUDO04CcpwE5TwNyngbkPA/IeR6Q8zwg53lAzvOAnOcBOc8Dcp4H5DwPyHkekPMyIOdlQM7LgJyXATkvA3JeBuS8DMh5GZDzMiDnZUDO64Cc1wE5rwNyXgfkvA7IeR2Q8zog53VAzuuAnNcBOW8Dct7j3GSKx+CUy8vfEM5dfcs3D2qPU5YXUhuo1EYqtYlKbaZSW6nUNiK1rcfZ17wdh5Fz8FOr9VRqA5XaSKU2UanNVGoLldpKpfaZ9j1pO2rxpyX/4ZOd7vhQanQvR8tfG/Vx/zZp9jkKhT/VXD6FcJqICt+83wvfInrvtKS6F16y36TCn+oJlP2xX5EbKt2nto/2xVUw2m2+7Epvf/3ii7DeBWF88GmXGnw+/+De/sDflQYzSut2KG1NUJpplBYapZVGaWNR+ty3DS6l1NEotbOeIqU06+lz38G4lNJEo9QMI9307UpDiIJSM4wElZphJKjUDCMhpcEMI0GlZhgJKjXDSFCpGUaCSiONUjOMFMKxYxaSE5TaYSSk1A4jIaV2GAkptcNIQGm0w0hIqR1GcqfSkASldhgJKbXDSEhppFFqh5GQUjuMhJTaYSSk1A4jIaV2GAkoTXYYCSmlYaREw0iJhpGe+6LmpZTSMFKiYaREw0iJhpESDSNlGkbKNIyUaRjpua/6XkopDTlkGnLINOSQacihWFll/C2I++ytbIJSK6sMVmrlThwrtbKeYqVW1lOs1Mp6ipVaWU+xUivrKVZq5U4cKq1W7sSxUjN34tu2v1Ecbv+ooNTMnThUauZpBVQaaZSa2XOASs3sOUCldhipHme2t01497/aYSSk1A4jAaXNDiMhpXb2kZBSO/tISKmdfSSkNNIotbOPhJTa2UdCSmkYqdEwUmNhJLdtLJB0k8pCSTepLJh0k8rCSTepkUcqCyndpLKg0k0qCyvdpLLA0k0qDy05HlpyPLRkpsXtA1J5aMlMk1tf69632rft1SNyYXKfjsJ9KpIvZhbhzr6YWbE7+2Jmee/ri5nmvL19MQMOnX0xQxmdfTGDJJ19iZy+HJ8Acb6JvpjZGursCynvQl9IeRf6Qsq70BdS3kW+mGm0/E5fzrl9dZIvpLwLfSHlXegLKe9CX+LyRfSFlHehL6S8C30h5V3oCynvQl9IeRf5YqZpdm9fFu/KvizelX1ZvCv7Epcvoi+Ld2VfFu/KvizelX1ZvCv7snhX9MVMA/TevlDyS2v72NaS5EpcrgiuULILdIWSXKArlNwCXaGkFugKJbMgV8y0I+/rCuX+HHSFcncOurLYVnIlLlcEVxbbSq4stpVc4dyT29x2zh0kXzj35LAvnHty0JfCuSeHfeF8Bo194XwGjX3hfAaNfYnLF9EXzmfQ2BfOZ9DYF1Le9eWYO26SL6S8C30h5V3ki53PWnT2hZR3oS+kvAt9Wbwr+xIXv0j8YubjHb19Wbwr+7L2d2Vf1v6u7Mva3xV9sfOJks6+rP1d2Ze1vyv7snhX9iUuX0RfFu/KvizelX1ZvCv7snhX9mXxruSLs/O1mc6+LN6VfVm8K/uyeFf2JS5fRF8W78q+LN6VfVm8K/uyeFf2ZfGu6Iud7wV19oWSX6rfW+xWXyVXIqUrMe+u5Cy5Qsku0BVKcoGuUK5DyBXOL9VAVyj3XKArlDsu0BVOXkGuxOWK4MriFcmVxSuSK5T7LNAVyl0W6Aon29a0u9Kke2bOr69AVzgpDrnCSXHIlbhcEVzhpDjkCifFIVc4KQ65wklxyJVFcYIrnN9aga4stpVcWWwrubLYVnIlLlcEVxbbSq4stpVcWWwrubLYVnJlsa3gCud3VaAri20lVxbbSq7E5YrgyqI4yZVFcZIri+IkVxbFCa7M/P2Q2E5XUn3lyl79xCvoA9VPvIvzQPUTr9MPVD/xevpA9ROvew9UP/H69ED1E68jD1Q/8V07rn7mLyQ8UP2l19qZvzbwQPWXXmtn7tz/QPUTr7UhndXH19VLtWxnLe4lp7tD68Qrc3etE6/j3bVOvOp31zoxI/TWOnMP+u5aJ+aP7lonppXuWidmm+5aI5FWIm6aufd6d61E3DRzj/TuWom4aeZe5t21EnHTzD3Hu2sl4qaZe4N310rETTP38O6u1Qw3xe34pFcMr57g71LNYBOWaoaaQg2nVPe1VD9zg+N3hjW5o5bkJal21lYo1c7SCqXaWVmhVDsLa9tbjdyeQDdJqp39CCjVznYElGpnNwJJnbnx7julnidBi98kqWbW1VqO4fVFLS+kWrkC325h9qq9kzoke2flCvyAVCtX4AekWrkCY6kzN53tLdXKbvADUq3crz4g1cq6+oDUyCPVyv3qA1J5aGnmPqq9pfLQ0swdT98pNR+zuxwFqcEOLUGpdmgJSrVDS1CqHVqCUiOPVDu0BKXaoSUo1Q4tQal2aAlK5aGlmduF9pZq56k5epAxc7PG3lLtPDWHUs08Na/+eOhYk3S/OnOvxN5SzTw1x1LNPDWHUmduVdhbqpkT/FiqmTOGWKqdsxBQauSRaoaWsFQeWpq5J2FvqXZoCR3RSnZoCUnNdmgJSrVDS1CqHVqCUnlOjs7cmrK3VDu0BKXaoSUo1Q4tQak8tDRz783OUmdu1NlbKg8tzdwCtLdUM+tqOh46ulRfven49eAQ3T53iFF6LdJOf8vOvphZsTv7YmZ57+yLGRbo64udfpydfTFDGZ19MYMknX0xs9vT2Ze4fBF9oVynq4/3sdVXyRXKVRq5Yqe/2ntcaW3vGNPEO0Y7ndi6ukKZILcdb7t9/p2vfQkbJec+4Asl5z7gCyXnPuALJec+4Etcvoi+ULLLA75Q0ssDvlDu6z7gC+X94gO+kPJuOQY7L+wvBDst+jr7Qsq70BdS3oW+kPIu9CUuX0RfSHkX+kLKu9AXUt6FvpDyLvRl8a7oi5mGqL19Wbwr+7J4V/Zl8a7sS1y+iL4s3pV9Wbwr+8LJu/4s3Pso+cLJu9gXTt6FvphpadvbF07exb5w8i72hZN3sS9x+SL6wsm72JfFdbIvi+tkXxbXib6Yab7b25fFdbIvi+tkXxbXyb7E5Yvoy+I62RfSdTqdvqQi+GKnmW9nX0ivu2ejdl+d5AvpdRf6Qnrdhb5wPj/CvpDuM0BfSPcZoC+k/IJ8sdNet7MvpPsM0BfSfQboCwHv7lKjGamtHrU48d+qHSqFUu2AJpRqhx2hVDs4CKXaITwk1U6XXyzVDodBqXbQCkq1Q0tQauSRykNLhtoxQ6lmaCknd9SSpDsbO02TsVQztASl2mltjKWaoSUs1QwtYal2vk4OpUYeqXa+Tg6lmqElLJWHlsw0afbu2PK+/aV0+qlZQYgHpFpBiAekWkGIB6RaQYgHpEYeqVYQ4gGpVhDiAalWEOIBqVY2XB6QSkNL0UyP/Qek0tBSNNMJ/wGpNLQUt8gjlYaWopmu8g9IvSYt7dVfE4D26q/JNPfqL9oafa/+muSxV29l2en72lwkbRuNfSF9DQr6QvoaFPSF9DUo6Mt6jVv0hbRtNPaF9DUo6Avpa1A1Hr400RfS1/6hL3H5IvpCyrvQF1Lehb6Q8i70Zb32L72WG1nbRiNfWNtGQ1/Wa/+yL+u1f9mX1eZK9iUuX0RfVpsr2ZfV5kr2ZbW5kn1ZvCv7snhX9IW1nTb0ZfGu7MviXdmXxbuyL3H5IvqyeFf2ZfGu7MviXdmXxbuiL4mSX1rbX81tL8p+4QolvUBXKNkFuhKXK4IrlNwCXaGkFugKJbNAVyiJBbpCuT+HXOFsQg9dWWwrubLYVnJlsa3kSlyuCK5w7sltbjvnDpIvnHty2BfOPTnsC+eeHPaF8xk09MVQ1/6+vnA+g8a+cD6Dxr5wPoPGvsTli+gLKe/6cswdN8kXUt6FvpDyLvSFlHehL6S8i3yx892Fzr4s3pV9Wbwr8oudzz909iUuX0Rf1v6u7Mva35V9Wfu7si9rf1f2Ze3vir6Y+UhIb18W78q+LN6VfVm8K/sSly+iL4t3ZV8W78q+LN6VfVm8K/uyeFfyJZn5zEtvXxbvyr4s3pV9Wbwr+xKXL6Ivi3dlXxbvyr4s3pV9Wbwr+nLRL8s86Uv1e4vd6qvkCiW91Jh3V3KWXKFkF+hKXK4IrlCuQ9AVylUIukK554Jc4fxKDXSFk1eQK4tXJFcWr0iuxOWK4ArlPgt0hXKXBbrCybZ1n7o26Z6Z8+sryBXOb69AVzgpDrnCSXHIFU6KQ67E5YrgCifFIVc4KQ65sihOcoVzhxK5sthWcIXzOyvQlcW2kiuLbSVXFttKrsTliuDKYlvJlcW2kiuLbSVXFttKriy2FVxJi20lVxbFSa4sipNcicsVwZVFcZIri+JeufLn7e/+94dfP/7w488//Xb7Jz7/n//69NffP/7y6f63v//fP7/8P7fB/w8="},{"name":"claim_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"get_portal_address","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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"},{"name":"exit_to_l1_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_l1","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"claim_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":""},{"name":"_assert_token_is_same","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/8VYzW4aMRA2SwCnhGWBQCAJC4RdIAlByaE9JeohbW/tqfeqf2qrNqnUH6ntI/ZB+gB9gs6M/0JkI02FlJV2x3i+mflsjz3LZqIohCjAHWXYlE+gKfpCX9hzGYsyiEd4PxSmhRZoGaOx6spReYlWuYaJDWo9hkfpAB7V+8KEqOOjTM/KMbWxhepMFJBPuUS0pFERPTKr5obeJjGkq4qPzI7mXq71ogr+noHcypHvloIWtUWkAZ9B1ghQ8wO+gYwJEPsBQyRHgLof8AFkQoDED7gG2SBAwwMIWgZJrYr1EmSTAE0/4BPIFgFaTNe/QG4TYNsPeAuyTYC2H/AGZIcAHewZ4Uo+dSmAcXdsClRdCuzgIzfJsJOJDeGuLjnsKlhRoyOFM4nVM0kjKYMRIimDRQ9amMGFqxto56eH8kFBR05w/YRUuV2i7JU6ubvK/NwGE46QjnMzi6uGhujBvOC+2aVh7LrwPT0MBHwHuUeAPQ/AppbH8jXIfQLshyzjkCIJKWocEnbreNi9wCOJAP2QZdNv+RVkSoA0ZBlUtP0uv4AcEGDAnqo+26LmJ/ER5JAAQw791bPfZ69wynaVMhfwCuSIACP2QOshxT6HBD9j/zP5W/4Z+AnygAAHzG3zCuSYAOO7nLsWWxFk1WHTTdjLELNZDdgx1jhXlBRUIv+4+nKBVcTWl56rL5ktkeglWy6ROTnMFayo0ZHCmao1sYVRlcjMlsjJrRJ5rvqMnwlKKpEY+SITJbF8oaoS29fAiquCrlLKYKXsTiNtWFDvkAY3cZhpmZrIZAr3jGbtL7aIl3vlpXKNsFmOihmGU3Uco5bcPJ+iKx+76TK7Wa71Ygr78jnIQ5rrQwUtaouI3JnTw6sYhhTtkKIRUtRDimZI0WErBmy6KVsRHEeyPlcN9kLF7Bg+C8iW9yCPCHDEnsw6ewaCaz9aX/Dm+tYlZbNa4z5J1ucqZadRjb3lmv78egfymADHK+cME4D+Fuqz7wzuuT37pu7sm9sag17myzXmhByeKFhRoyOFMyfqwpyWusbMbY1Z3Koxp6rP+FmgpLMcI5+NbRWQFTr6ZQXt4dbfGORmgb5e4D8+DCdpjD/UL8Qbm83cwMpKsWEVkeqU6lMEduJwZGUInq7HyLr7G+9/E5VrsmkRAAA=","debug_symbols":"5ZztSptZFIXvJb9lePf3Od7KMBRttQREi9qBQbz3SW1ilYZx1rK7EPKnxXTvw3vyPAvKCvFh9eni/OvnD+vry5u71emfD6urm49n9+ub681PD48nq/Pb9dXV+vOHly+vlqc//hB52rj7cnb97YW7+7Pb+9XpcrK6uP60+Xuzfbm+ulidpjye/DQ2rbaDM+p5VLL2zLpIbIdd1H9My9gznepjO52ar6f/Ovn23PqO55ZFfDspi/lvfnJ7zztetnvH51vvuOjyfEvN5Y3nLh+5na7Quee5/Zc89+YNf/3g3w+PzsOz8/DqPHx0Hj4bD9el83DpPFw7D7fOwzsTqp0J1c6EamdCtTOh2plQ60yodSbUOhNqnQm1zoRaZ0KtM6HWmVDrTKh1JtQ7E+qdCfXOhHpnQr0zod6ZUO9MqHcm1DsT6p0Jjc6ERmdCozOh0ZnQ6ExodCY0OhManQmNzoRGZ0KzM6HZmdDsTGh2JjQ7E5qdCc3OhGZnQrMzodmZ0OpMaHUmtDoTWp0Jrc6EVmdCqzOh9Z6Eutau+Hcd+Xjyn3V72pzb6XTZ8zFBvSfQv/gji/r/+X+aHws4L+C8gvMGzjs4H+B8gvMFzg9wHuQ7Qb4T5DtBvhPkO0G+E+Q7Qb4T5DtBvhPkK8uCLgi6oOiCoQuOLgS6kOhCoQsDXUBJC0paUNKCkhaUtKCkBSUtKGlBSQtKWlDSipJWlLSipBUlrShpRUkrSlpR0oqSVpS0oaQNJW0oaUNJG0raUNKGkjaUtKGkDSXtKGlHSTtK2lHSjpJ2lLSjpB0l7ShpR0kHSjpQ0oGSDpR0oKQDJR0o6UBJB0o6UNKJkk6UdKKkEyWdKOlESSdKOlHSiZJOlHShpAslXSjpQkkXSrpQ0oWSLpR0oaTRPkzQQkzQRkzQSkzQTkzQUkzQVkzQWkzQXkzQYkzQZkzQakzQbkzQckzQdkzQekzQfkzQgkzQhkzQikzQjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkzRjkz3d2RZz5+bZpm9XNvz/apNn78d3nTW+jy8+SBhz3RY7b5fFfbyu1t7P5KNzZu8m9bQN6ZH+O6xR8zl1fT2unpc17Xjuq4f13XjuK6bx3Xd+u3XTdldwOWtC2xe1eezp/yYLttdYBz6BeaBX8CXQ7+AHPoF9NAvYId+AX/zAh4//7/Yg1tLbq24tcGtTWotFm5NuDXl1oxb4ywJzpLgLAnOkuAsCc6S5CxJzpLkLEnOkuQsSc6S5CxJzpLkLEnOkuIsKc6S4iwpzpLiLCnOkuIsKc6S4iwpzpLBWTI4SwZnyeAsGZwlg7NkcJYMzpLBWTI4SyZnyeQsmZwlk7NkcpZMzpLJWTI5SyZnyaQssWXh1oRbU27NuDXn1oJbS26tuLXBrXGWCGeJcJYIZ4lwlghniXCWCGeJcJYIZ4lwlihniXKWKGeJcpYoZ4lylihniXKWKGeJcpYYZ4lxlhhniXGWGGeJcZYYZ4lxlhhniXGWOGeJc5Y4Z4lzlnDdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq3Hdq+Hd6+Pmp7/Pbtdn51cX21/lffn1+uOL3+x9/8+X7/+yGf4X"},{"name":"get_portal_address_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/5WUzU7DMAzH3XZruwFlfLX76KTBGnHgDFcOY9zgBTghwQGBtgsXeEReavhvJ802dUhESuzEPzuOa7WiiIgCnmEFNb1nlcZkR8gns4xiFneYt+Q0NVKQwVmPDIwzXiJjMWpd8LKHrQSfX8Mwh98hztqyxleiQ+OZVBQgn3Zb0kqcSdIjOHSNSy+VsDK6WKr6NR1j7dTleI+SBfLdUzSyHqEFliz3BdhvBj5ZHghw0AxMWGYCZM3AG7IX4LAZWLDsCdBrAHZ67kzqr7ueWR4JcNQMfLA8FuD4n6G/WZ4IcNIMvLI8FeC0GXhheSbAGU7O8SUffAugOnndAl3fAjkW45ohr6hFfhQSsFAssnSonGusvmuaVDoYSNoSrc9aG728WKN9nD7kTWBv7lXSsesDFyWZ9rf2+DYB51iJ2L8Vp4P6rYV/62Cz3fPL0IbGrqhqbuiZUSzqECrPUur6BE0ytyOyVQJWGhhKXKeZDbReG7mveIBSAnDJxGpr4FIlcPfIx1i7msZK4O8zDutw2JZbW6q3o02/IhE1t68YyyPfoflHGlfAwtiqUjStS5YmUqc0wSfnmer/KO0E8qfr4AhTIn/pDrzz6RiHxWpo1YZQD2G0tPxgkwkryymS6f9g/gKLQOb6lQUAAA==","debug_symbols":"7ZvdauJQFIXfJdcynLN/c3yVYSjaagmIFrUDg/juk9YkVQz1ol01IblREle2ay/42HpOcsieFvPX54divdzssunvQ7baPM72xWZdHh2Ok2y+LVar4vnh/HQW3l9+xfh+xe5ltn47sdvPtvtsGibZYv1UvpdXL4vVIptaPE6uZIm9Eib1RhrNW7QSo1ZiiSQf6pi3qI0kr9RGdqn+M3nzTV/wHUOUShkDyw87568k7lwnnm4lHik0XZKFG75dcqvUrpRafMu3+C4DvzR+Kq7I4oYs7sjiObJ4AhangCwekcUJWZyRxZGEEpJQQhJKSEIJSSghCWUkoYwklJGEMpJQRhLKSEIZSSgjCWUkoYwkVJCECpJQQRIqSEIFSaggCRUkoYIkVJCECpJQRRKqSEIVSagiCVUkoYokVJGEKpJQRRKqSEINSaghCTUkoYYk1JCEGpJQQxJqSEINSaghCXUkoY4k1JGEOpJQRxLqSEIdSai3EhrFY32ZBv38K6LHRuxsjThPLWJlr9fclc/X81tX6JWoUZPSDXWuUu9a5JouV/9PzaYBNZvHITVLQ2qWh9SsDKlZHVKz9tPNWi3Wclf7hn3X2r2fb2l7rMx7n83nfTafemw+hT6bj302T302z502z9SY1wvzLf9HQn2rUGK+oXWttZ5/hEJSZSJjJleZdHuk3ieTbg+7u2QSQ7fn0J1C6fZ8u1Mo3Z6bdwplnMctoYwDuSUUHUO5DmX8mXIRyrE8+jvbFrP5alE9wLB8XT+ePc+w//dy+qQU/wc="},{"name":"_call_mint_on_token","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/8WYS48bRRCA2561PfauH/MejzPxPjyxnV0kCAKJ5MBhCXBaceSCEJAgIZ4KDync8hMQEhy48CsQXDhw5F8ECcQJ5cI9XdXdVR6nO5uJVoolT/dMf91dU1XdVT0L4QkhWvLfXkDVf0NWRSn0b0c+OR2Jrixeg/+rwtSgB/QcQWf1qILGU3nxKo2JHazdlJcO1l6Xl+6hvOy9JMxkY7j4eO0fYx1q8j9YiBZI5ndQwIFpQkGx27Aygu4KfAi/IVwW9F57lW4XQznemSxHFUg+Uqine7Q18DkMjcDYDnwlywkCEzuwL8sAgcAOfCTLEIHQDnwmywiByAI4ezqFetxc78kyRiC2A5/IMkEgaTj0t7JMEUjtwG1ZZghkduCWLHMEcnhyAJY8YxeAd52SCwzZBaZwqYwzTBfgx/QrcMBCYZ6m24ozjjUzTuOjLwPioy+LGfij9ODW3xs0jzOD8uWWnnkCHiAGyrc7sIzQi8G5C9X9Ok0mWCA9z6YXD40YYib1AsvoEr7GJZ5+pl8DgK9hESNQWgByLUvPD2R5GYHLrp4TV0Poahg3EYKWjkW6d2U5R2Du6ukUO3Y1JI0b5nbpPpXlPgL7jVUUNdb2/OK0PW88+diugY9leYDAgatndiG+8JSmbj5Hc2UmdtXcleUhAocNnf59WR4hcNRYqcGzXCZOqfLG4l7gusnsWr4D+y0Ci8ZzXaDO0Dkw0P3FUeIGhDOKEjOOEhVdYJSqHuiu4IBXFOFpsK04E3uWFN48M5YOdMutQHddPTPjLKHEQAcz31iIjqj/oKmPqSPGuz7HMo53A2e8K5Zt3bGlMkHDLZlZdbEKkqzkf41a+w9qKJf+eTroArauoGGtLG6GGZA4BYszQGW0dT9tBg+HsAi/ZuHhtyJmzcyq/oJXcfA1zQ8THiv6WJvpGJEV1gxyokaAhucUfaKq4gTpq1jT9hO9fTlZhwXLO1jt6SU4BY21focagH3UToE5l0m4C5o5UdMlevYEkQQzOEJYuJjpuEanqiHVXMoaSWyaTcgOOfuBV6NzG63eQjc/KrvZBxJCYpY9UnSsV3xMKWzMmkyxY2pUV3FL1qFkEGYoUMc/Qg3A9YZmW+atSIht5SCSUpabs8La/Fap0SzRmWrINHfO7caATp2ylVJWqlzzz986u3P/hZ/Xv75185d7995+B1Sm1jxoLpLE6sV/37z72xffnd7///sHasRQEbClh7xvbCxZESgCokHQpuHgNtq6FXQb1vvxmcZq/Fi/wOaONfnmlWvwWA2SsEPDb0y6CVg347puwmsJBzc08lRLY+BEH2kzdaQdGydRY0TiyQ4Dg9phoH6ktUS228Ic1IZ24EsBx2S427MDcObdRWDXFbccQ8MJrl+ZvdwCyEUhfAR84TyQ9BDo2QE4wXYR6NoBOMF2EOi4pHc2OIT6UMC3DbjbcfV0CAOHfw8Br7EwQ1eDQ7ew9WwcE3En+oHdDdZAacsqylpWUdazCj4clqpHqWcs2YnnW1lFSVnFfCuriNQzMw4cRErKKuKjc7bVn6DGwd6yt/J2pXf1yGzyiES1GBDxVhgyHdZoHdiKeqwwm0tA6gxZnUF99U5M6NDKCUk5yZZy9K5hPjMkfBvqRyNytZGgTyKY/VLCOqD8OXfrwuTekS0eJhwPE9pZJ8zwS00s8dCac/whzGcSNhx+kSETclYR8/S4cyMSk20H5wTvVj0MTOsJigm1IRkuYsOFdcMp42ZkuIgMl1oMN2GDpHwb6UdjWunaogF5kAlPxYYJnbowto1tSVjKzplS5AuY4ZcKHk0W/R6m134PP8AK31ehy++38ItvHx7BH+35QN0Bb/pgNolYVzXsUENbPYRGTYO4PgrwzxEIlP8J/4fN6wHcnRYAAA==","debug_symbols":"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"},{"name":"get_token","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/72WyW7bMBCGqcWS7CSO7XjL5liW5B56SQ7ttYc0ubWvUHRDUbRoD20P7SMWeYBcknMeIzM/tzggDRAwIoAcmvNxOByOxqpFIoSIqMU1D4tLGopjoZ6YZs67IiPxmtsroUdSKaIuL5ZTDSvPqUsahYl0Qd0W/4TxixesuOB1uzzXQp89x5hH1PJaROxPqwW3cq2Ce4IXdBrtXgGzeDrc1eY07UbpRYfsvYUX7O+WRBO1IlbAT5LbALbdwG+SOwB23MCcZBdA1w18Ze8B7LqBHyR7AHoOwLvS69S6vd6T7APou4HvJAcABoGm/5HcA7DnBj6THAIYuoFPJEcARjxT8k2+sSnA0RmbFOjYFBhz1+hkGNciFfaZwOBEYomiY8npxJrqpCmQwYwUKUZTGrU4l28e0NbOlOXLSO3cUxmcyQxObWIzf7qSwRNvBssjTlRMLuFerPZyBO0PyX0A+74L67lXfiR5AOBgI+nlfY3W57bntflC8hDAoW/lMMRtMvmO5BGAo+ADe8rDNy6aAI6DvQyKyPp76m9uj/ALHLhD85fkDMAs8Oo/kDwBcBIc1A3GbhCs8Ho1CozAL5JzAPPgTO1v7mV+ipjNTKm/srXyjFrpKvXlSqkvV0v9AgYXEksUHUtOV+BKV1dV6ktT6qtHpf5Uzmk7FUtT6s9qfJw8fFDy8ckEp1Jb0StzktyepFqt+otnsVoY2TAAsUyTYVirECwRjGsewS/1JHIfYMuGFUvjQ4UoCRWlpDLbFDlsFzkHgVoh/8qKdoTPvDZPccOWd/IX83pNu9FYJhWpUcRykpWKxtdlzpl9C7em/7ndA1IQeG6SCgAA","debug_symbols":"5ZvRSltBEIbf5VyHcmZ2Zvasr1JKiRolEKJoLBTJu/eoSVQamn7YEdLcKDn+u+ycj+/mN/vYXc7OH66/z5dXN/fd2dfHbnFzMV3Nb5bjp8f1pDu/my8W8+vvbx93/fOPLyLPK+5vp8unB/er6d2qO+sn3Wx5Of4eV1/NF7PuLGQ9+S3WSt0Em9ddVKLuyZqIb8Imaq9pGfakQ23YpEPjffrb5Onc+oFzSy+2SUpf7JNPXj7yxmvZvvF26I2L9rspNfoD5642xCZdXduec9s/Off4wt8f/GVzz9w8MjevmZsPmZu3xM21z9xcMjfXzM1L5uaZhmqmoZppqGYaqpmGaqahJdPQkmloyTS0ZBpaMg0tmYaWTENLpqEl09CSaahlGmqZhlqmoZZpqGUaapmGWqahlmmoZRpqmYZ6pqGeaahnGuqZhnqmoZ5pqGca6pmGeqahnmloZBoamYZGpqGRaWhkGhqZhkamoZFpaGQaGpmG1kxDa6ahNdPQmmlozTS0ZhpaMw2tf2/oS36A+cbyQw/zAvMK8wXmDeYd5gPmId8B8h0g3wb5Nsi3Qb4N8m2Qb4N8G+TbIN8G+TbIV/qeLhC6QOmCQhcYXeB0QdAFlS4Y6AJKWihpoaSFkhZKWihpoaSFkhZKWihpoaSVklZKWilppaSVklZKWilppaSVklZKulDShZIulHShpAslXSjpQkkXSrpQ0oWSNkraKGmjpI2SNkraKGmjpI2SNkraKGmnpJ2SdkraKWmnpJ2SdkraKWmnpJ2SDko6KOmgpIOSDko6KOmgpIOSDko6KOlKSVdKulLSlZKulHSlpCslTdswoXWY0D5MaCEmtBETWokJ7cSElmJCWzGhtZjQXkxoMSa0GRNajQntxoSWY0LbMaH1mNB+TGhBJrQhE1qRCe3IlHZkSjsypR2Z0o5M93dk3obdVYC+j/Uf/zcxNkjbyxRjc6O78Fin7Ul7qdtv63t5exNg73f7XXWXVtcD6cFte99h8Na/S2/GjdMat57WuMNpjdtOatz9RfX/O658+rgh2wFMDg0wPtXd3k1e07VsB9BjH6Ac+wB27AP4sQ8Qxz5APd4B1uPHH9O7+fR8MdtcKL56WF68uV+8+nn78pcx/As="}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"token","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"portal_address","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::_call_mint_on_token_parameters"}}],"kind":"struct","path":"TokenBridge::_call_mint_on_token_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"caller_on_l1","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::exit_to_l1_private_parameters"}}],"kind":"struct","path":"TokenBridge::exit_to_l1_private_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"TokenBridge::get_token_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"TokenBridge::_assert_token_is_same_parameters"}}],"kind":"struct","path":"TokenBridge::_assert_token_is_same_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::claim_private_parameters"}}],"kind":"struct","path":"TokenBridge::claim_private_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"TokenBridge::get_portal_address_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::claim_public_parameters"}}],"kind":"struct","path":"TokenBridge::claim_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"TokenBridge::constructor_parameters"}}],"kind":"struct","path":"TokenBridge::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"caller_on_l1","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::exit_to_l1_public_parameters"}}],"kind":"struct","path":"TokenBridge::exit_to_l1_public_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"TokenBridge::get_portal_address_abi"}]}},"file_map":{"105":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"108":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"109":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, public_call_stack_item::PublicCallStackItem,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"110":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"118":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<let N: u32>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N as Field)\n}\n\nunconstrained fn storage_write<let N: u32>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<let N: u32>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<let N: u32>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"},"120":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash,\n    hash::{\n    pedersen_hash, compute_siloed_nullifier, sha256_to_field, pedersen_commitment,\n    poseidon2_hash_with_separator\n}\n};\n// Note: pedersen_commitment is used only as a re-export here\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        poseidon2_hash_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x1cce4dbf69f14c44865919991ee1057922e34d7310ba237d71759aa422621ca9);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"131":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::{PrivateContext, UnconstrainedContext},\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{\n    public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH}, stored_keys::StoredKeys,\n    constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}\n},\n    state_vars::{\n    shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter,\n    public_mutable::PublicMutable, map::Map\n}\n};\n\nmod test;\n\n// This is the number of blocks that must pass after a key rotation event until the old keys are fully phased out and\n// become invalid.\nglobal KEY_REGISTRY_UPDATE_BLOCKS = 5;\n\nglobal KEY_REGISTRY_STORAGE_SLOT = 1;\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// Returns all current public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_current_public_keys(context: &mut PrivateContext, account: AztecAddress) -> PublicKeys {\n    // We're going to perform historical reads from public storage, and so need to constrain the caller so that they\n    // cannot use very old blocks when constructing proofs, and hence e.g. read very old keys. We are lax and allow\n    // _any_ recent block number to be used, regardless of whether there may have been a recent key rotation. This means\n    // that multiple sets of keys are valid for a while immediately after rotation, until the old keys become phased\n    // out. We *must* be lax to prevent denial of service and transaction fingerprinting attacks by accounts that rotate\n    // their keys frequently.\n    // Note that we constrain the max block number even if the registry ends up being empty: this ensures that proof of\n    // an empty registry is also fresh.\n    let current_header = context.get_header();\n    context.set_tx_max_block_number(current_header.global_variables.block_number as u32 + KEY_REGISTRY_UPDATE_BLOCKS);\n\n    get_historical_public_keys(current_header, account)\n}\n\n// Returns historical public keys for a given account at some block determined by a block header. We read all keys at\n// once since the constraints for reading them all are actually fewer than if we read them one at a time - any read keys\n// that are not required by the caller can simply be discarded.\n// WARNING: if called with a historical header created from a fixed block this function will explicitly ignore key\n// rotation! This means that callers of this may force a user to use old keys, potentially leaking privacy (e.g. if the\n// old keys were leaked). Only call this function with a header from a fixed block if you understand the implications of\n// breaking key rotation very well.\npub fn get_historical_public_keys(historical_header: Header, account: AztecAddress) -> PublicKeys {\n    // TODO: improve this so that we always hint the correct set of keys (either registry or canonical) and hash them\n    // once instead of having two different hints and twice as many constraints due to the double hashing.\n\n    // The key registry is the primary source of information for keys, as that's where accounts store their new keys\n    // when they perform rotation. The key registry conveniently stores a hash of each user's keys, so we can read that\n    // single field and then prove that we know its preimage (i.e. the current set of keys).\n    let key_registry_hash = key_registry_hash_public_historical_read(historical_header, account);\n    if key_registry_hash != 0 {\n        let hinted_registry_public_keys = key_registry_get_stored_keys_hint(\n            account,\n            historical_header.global_variables.block_number as u32\n        );\n        assert_eq(hinted_registry_public_keys.hash().to_field(), key_registry_hash);\n\n        hinted_registry_public_keys\n    } else {\n        // If nothing was written to the registry, we may still be able to produce the correct keys if we happen to know\n        // the canonical set (i.e. the ones that are part of the account's preimage).\n        let (hinted_canonical_public_keys, partial_address) = get_public_keys_and_partial_address(account);\n        assert_eq(\n            account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n        );\n\n        hinted_canonical_public_keys\n    }\n}\n\nfn key_registry_hash_public_historical_read(historical_header: Header, account: AztecAddress) -> Field {\n    // The keys are stored in a Map that is keyed with the address of each account, so we first derive the corresponding\n    // slot for this account.\n    let keys_storage_slot = derive_storage_slot_in_map(KEY_REGISTRY_STORAGE_SLOT, account);\n\n    // The keys are stored as [ ...serialized_keys, hash ], and since arrays get allocated sequential storage slots\n    // (prior to siloing!), we simply add the length to the base slot to get the last element.\n    let hash_storage_slot = keys_storage_slot + PUBLIC_KEYS_LENGTH as Field;\n\n    historical_header.public_storage_historical_read(hash_storage_slot, CANONICAL_KEY_REGISTRY_ADDRESS)\n}\n\nunconstrained fn key_registry_get_stored_keys_hint(account: AztecAddress, block_number: u32) -> PublicKeys {\n    // This is equivalent to the key registry contract having an unconstrained getter that we call from an oracle, but\n    // PXE does not yet support that functionality so we do this manually instad. Note that this would be a *historical*\n    // call!\n\n    // TODO (#7524): call the unconstrained KeyRegistry.get_current_keys() function instead\n\n    let context = UnconstrainedContext::at_historical(CANONICAL_KEY_REGISTRY_ADDRESS, block_number);\n    let keys_storage = Map::new(\n        context,\n        KEY_REGISTRY_STORAGE_SLOT,\n        |context, slot| { PublicMutable::new(context, slot) }\n    );\n\n    let stored_keys: StoredKeys = keys_storage.at(account).read();\n    stored_keys.public_keys\n}\n"},"138":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<let N: u32>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"139":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"140":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"143":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage,\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, public_data_tree_index: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"144":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<let N: u32>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"145":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"149":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n"},"153":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr","source":"use dep::protocol_types::{address::AztecAddress};\n\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: u64 = 17;\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n"},"162":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_data_tree_index\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"167":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"171":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{constants::ETH_ADDRESS_LENGTH, traits::{Empty, ToField, Serialize, Deserialize}, utils};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"173":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash_with_separator,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"177":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"190":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"192":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes = max_value.to_be_bytes(32);\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"193":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"211":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"212":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"213":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc, point::Point\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"22":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n"},"221":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"226":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        assert(false, \"depth should be between 0 and 10\");\n        0\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"23":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"24":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"243":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"27":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\ntrait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"292":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x:fields[0], y: fields[1], is_infinite: fields[2] as bool},\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"311":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-contracts/contracts/token_contract/src/main.nr","source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n\ncontract Token {\n    // Libs\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        context::{PrivateContext, PrivateCallInterface}, hash::compute_secret_hash,\n        prelude::{\n        NoteGetterOptions, Map, PublicMutable, SharedImmutable, PrivateSet, AztecAddress,\n        FunctionSelector, NoteHeader, Point\n    },\n        encrypted_logs::{\n        encrypted_note_emission::{encode_and_encrypt_note_with_keys, encode_and_encrypt_note_with_keys_unconstrained},\n        encrypted_event_emission::{encode_and_encrypt_event, encode_and_encrypt_event_with_keys_unconstrained}\n    },\n        keys::getters::get_current_public_keys\n    };\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{assert_current_call_valid_authwit, assert_current_call_valid_authwit_public, compute_authwit_nullifier};\n    // docs:end:import_authwit\n\n    use crate::types::{\n        transparent_note::TransparentNote,\n        token_note::{TokenNote, TOKEN_NOTE_LEN, TokenNoteHidingPoint}, balances_map::BalancesMap\n    };\n    // docs:end::imports\n\n    // In the first transfer iteration we are computing a lot of additional information (validating inputs, retrieving\n    // keys, etc.), so the gate count is already relatively high. We therefore only read a few notes to keep the happy\n    // case with few constraints.\n    global INITIAL_TRANSFER_CALL_MAX_NOTES = 2;\n    // All the recursive call does is nullify notes, meaning the gate count is low, but it is all constant overhead. We\n    // therefore read more notes than in the base case to increase the efficiency of the overhead, since this results in\n    // an overall small circuit regardless.\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES = 8;\n\n    #[aztec(event)]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[aztec(storage)]\n    struct Storage {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: BalancesMap<TokenNote>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128>,\n        // docs:start:storage_pending_shields\n        pending_shields: PrivateSet<TransparentNote>,\n        // docs:end:storage_pending_shields\n        public_balances: Map<AztecAddress, PublicMutable<U128>>,\n        symbol: SharedImmutable<FieldCompressedString>,\n        name: SharedImmutable<FieldCompressedString>,\n        // docs:start:storage_decimals\n        decimals: SharedImmutable<u8>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[aztec(public)]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_public\n        storage.decimals.read_public()\n        // docs:end:read_decimals_public\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_private\n        storage.decimals.read_private()\n        // docs:end:read_decimals_private\n    }\n\n    // docs:start:admin\n    #[aztec(public)]\n    #[aztec(view)]\n    fn admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[aztec(public)]\n    #[aztec(view)]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[aztec(public)]\n    #[aztec(view)]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[aztec(public)]\n    #[aztec(view)]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[aztec(public)]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_public\n    #[aztec(public)]\n    fn mint_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_public\n\n    // docs:start:mint_private\n    #[aztec(public)]\n    fn mint_private(amount: Field, secret_hash: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount, secret_hash);\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n\n        storage.total_supply.write(supply);\n        // docs:start:insert_from_public\n        pending_shields.insert_from_public(&mut note);\n        // docs:end:insert_from_public\n    }\n    // docs:end:mint_private\n\n    // TODO: Nuke this - test functions do not belong to token contract!\n    #[aztec(private)]\n    fn privately_mint_private_note(amount: Field) {\n        let caller = context.msg_sender();\n        let caller_keys = get_current_public_keys(&mut context, caller);\n        storage.balances.add(caller, caller_keys.npk_m, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note_with_keys(&mut context, caller_keys.ovpk_m, caller_keys.ivpk_m, caller)\n        );\n\n        Token::at(context.this_address()).assert_minter_and_mint(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn assert_minter_and_mint(minter: AztecAddress, amount: Field) {\n        assert(storage.minters.at(minter).read(), \"caller is not minter\");\n        let supply = storage.total_supply.read() + U128::from_integer(amount);\n        storage.total_supply.write(supply);\n    }\n\n    // docs:start:shield\n    #[aztec(public)]\n    fn shield(from: AztecAddress, amount: Field, secret_hash: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            // The redeem is only spendable once, so we need to ensure that you cannot insert multiple shields from the same message.\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount.to_field(), secret_hash);\n\n        storage.public_balances.at(from).write(from_balance);\n        pending_shields.insert_from_public(&mut note);\n    }\n    // docs:end:shield\n\n    // docs:start:transfer_public\n    #[aztec(public)]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_public\n\n    // docs:start:burn_public\n    #[aztec(public)]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:redeem_shield\n    #[aztec(private)]\n    fn redeem_shield(to: AztecAddress, amount: Field, secret: Field) {\n        let secret_hash = compute_secret_hash(secret);\n\n        // Pop 1 note (set_limit(1)) which has an amount stored in a field with index 0 (select(0, amount)) and\n        // a secret_hash stored in a field with index 1 (select(1, secret_hash)).\n        let mut options = NoteGetterOptions::new();\n        options = options.select(TransparentNote::properties().amount, amount, Option::none()).select(\n            TransparentNote::properties().secret_hash,\n            secret_hash,\n            Option::none()\n        ).set_limit(1);\n\n        let notes = storage.pending_shields.pop_notes(options);\n        assert(notes.len() == 1, \"note not popped\");\n\n        // Add the token note to user's balances set\n        // Note: Using context.msg_sender() as a sender below makes this incompatible with escrows because we send\n        // outgoing logs to that address and to send outgoing logs you need to get a hold of ovsk_m.\n        let from = context.msg_sender();\n        let from_keys = get_current_public_keys(&mut context, from);\n        let to_keys = get_current_public_keys(&mut context, to);\n        storage.balances.add(to, to_keys.npk_m, U128::from_integer(amount)).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, to_keys.ivpk_m, to));\n    }\n    // docs:end:redeem_shield\n\n    // docs:start:unshield\n    #[aztec(private)]\n    fn unshield(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let from_keys = get_current_public_keys(&mut context, from);\n        storage.balances.sub(from, from_keys.npk_m, U128::from_integer(amount)).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from));\n\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:unshield\n\n    // docs:start:transfer\n    #[aztec(private)]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        let from_keys = get_current_public_keys(&mut context, from);\n        let to_keys = get_current_public_keys(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n\n        // We reduce `from`'s balance by amount by recursively removing notes over potentially multiple calls. This\n        // method keeps the gate count for each individual call low - reading too many notes at once could result in\n        // circuits in which proving is not feasible.\n        // Since the sum of the amounts in the notes we nullified was potentially larger than amount, we create a new\n        // note for `from` with the change amount, e.g. if `amount` is 10 and two notes are nullified with amounts 8 and\n        // 5, then the change will be 3 (since 8 + 5 - 10 = 3).\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            from,\n            amount,\n            INITIAL_TRANSFER_CALL_MAX_NOTES\n        );\n\n        storage.balances.add(from, from_keys.npk_m, change).emit(\n            encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from)\n        );\n\n        storage.balances.add(to, to_keys.npk_m, amount).emit(\n            encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_keys.ovpk_m, to_keys.ivpk_m, to)\n        );\n\n        // We don't constrain encryption of the note log in `transfer` (unlike in `transfer_from`) because the transfer\n        // function is only designed to be used in situations where the event is not strictly necessary (e.g. payment to\n        // another person where the payment is considered to be successful when the other party successfully decrypts a\n        // note).\n        Transfer { from, to, amount: amount.to_field() }.emit(\n            encode_and_encrypt_event_with_keys_unconstrained(&mut context, from_keys.ovpk_m, to_keys.ivpk_m, to)\n        );\n    }\n    // docs:end:transfer\n\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: U128,\n        max_notes: u32\n    ) -> U128 {\n        let subtracted = storage.balances.try_sub(account, amount, max_notes);\n\n        // Failing to subtract any amount means that the owner was unable to produce more notes that could be nullified.\n        // We could in some cases fail early inside try_sub if we detected that fewer notes than the maximum were\n        // returned and we were still unable to reach the target amount, but that'd make the code more complicated, and\n        // optimizing for the failure scenario is not as important.\n        assert(subtracted > U128::from_integer(0), \"Balance too low\");\n\n        if subtracted >= amount {\n            // We have achieved our goal of nullifying notes that add up to more than amount, so we return the change\n            subtracted - amount\n        } else {\n            // try_sub failed to nullify enough notes to reach the target amount, so we compute the amount remaining\n            // and try again.\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n\n    // TODO(#7729): apply no_predicates to the contract interface method directly instead of having to use a wrapper\n    // like we do here.\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: U128\n    ) -> PrivateCallInterface<25, U128, (AztecAddress, Field)> {\n        Token::at(context.this_address())._recurse_subtract_balance(account, remaining.to_field())\n    }\n\n    // TODO(#7728): even though the amount should be a U128, we can't have that type in a contract interface due to\n    // serialization issues.\n    #[aztec(internal)]\n    #[aztec(private)]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: Field) -> U128 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            U128::from_integer(amount),\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES\n        )\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[aztec(private)]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_from\n    #[aztec(private)]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        let from_keys = get_current_public_keys(&mut context, from);\n        let to_keys = get_current_public_keys(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.sub(from, from_keys.npk_m, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.add(to, to_keys.npk_m, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, to_keys.ivpk_m, to));\n    }\n    // docs:end:transfer_from\n\n    // docs:start:burn\n    #[aztec(private)]\n    fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let from_keys = get_current_public_keys(&mut context, from);\n        storage.balances.sub(from, from_keys.npk_m, U128::from_integer(amount)).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from));\n\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn\n\n    /// We need to use different randomness for the user and for the fee payer notes because if the randomness values\n    /// were the same we could fingerprint the user by doing the following:\n    ///      1) randomness_influence = fee_payer_point - G_npk * fee_payer_npk =\n    ///                              = (G_npk * fee_payer_npk + G_rnd * randomness) - G_npk * fee_payer_npk =\n    ///                              = G_rnd * randomness\n    ///      2) user_fingerprint = user_point - randomness_influence =\n    ///                          = (G_npk * user_npk + G_rnd * randomness) - G_rnd * randomness =\n    ///                          = G_npk * user_npk\n    ///      3) Then the second time the user would use this fee paying contract we would recover the same fingerprint\n    ///         and link that the 2 transactions were made by the same user. Given that it's expected that only\n    ///         a limited set of fee paying contracts will be used and they will be known, searching for fingerprints\n    ///         by trying different fee payer npk values of these known contracts is a feasible attack.\n    ///\n    /// `fee_payer_point` and `user_point` above are public information because they are passed as args to the public\n    /// `complete_refund(...)` function.\n    #[aztec(private)]\n    fn setup_refund(\n        fee_payer: AztecAddress, // Address of the entity which will receive the fee note.\n        user: AztecAddress, // A user for which we are setting up the fee refund.\n        funded_amount: Field, // The amount the user funded the fee payer with (represents fee limit).\n        user_randomness: Field, // A randomness to mix in with the generated refund note for the sponsored user.\n        fee_payer_randomness: Field // A randomness to mix in with the generated fee note for the fee payer.\n    ) {\n        // 1. This function is called by fee paying contract (fee_payer) when setting up a refund so we need to support\n        // the authwit flow here and check that the user really permitted fee_payer to set up a refund on their behalf.\n        assert_current_call_valid_authwit(&mut context, user);\n\n        // 2. Get all the relevant keys\n        let fee_payer_npk_m_hash = get_current_public_keys(&mut context, fee_payer).npk_m.hash();\n        let user_keys = get_current_public_keys(&mut context, user);\n        let user_npk_m_hash = user_keys.npk_m.hash();\n\n        // 3. Deduct the funded amount from the user's balance - this is a maximum fee a user is willing to pay\n        // (called fee limit in aztec spec). The difference between fee limit and the actual tx fee will be refunded \n        // to the user in the `complete_refund(...)` function.\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            user,\n            U128::from_integer(funded_amount),\n            INITIAL_TRANSFER_CALL_MAX_NOTES\n        );\n        storage.balances.add(user, user_keys.npk_m, change).emit(\n            encode_and_encrypt_note_with_keys_unconstrained(&mut context, user_keys.ovpk_m, user_keys.ivpk_m, user)\n        );\n\n        // 4. We create the partial notes for the fee payer and the user.\n        // --> Called \"partial\" because they don't have the amount set yet (that will be done in `complete_refund(...)`).\n        let fee_payer_partial_note = TokenNote {\n            header: NoteHeader {\n                contract_address: AztecAddress::zero(),\n                nonce: 0,\n                storage_slot: storage.balances.map.at(fee_payer).storage_slot,\n                note_hash_counter: 0\n            },\n            amount: U128::zero(),\n            npk_m_hash: fee_payer_npk_m_hash,\n            randomness: fee_payer_randomness\n        };\n        let user_partial_note = TokenNote {\n            header: NoteHeader {\n                contract_address: AztecAddress::zero(),\n                nonce: 0,\n                storage_slot: storage.balances.map.at(user).storage_slot,\n                note_hash_counter: 0\n            },\n            amount: U128::zero(),\n            npk_m_hash: user_npk_m_hash,\n            randomness: user_randomness\n        };\n\n        // 5. Now we get the note hiding points.\n        let mut fee_payer_point = fee_payer_partial_note.to_note_hiding_point();\n        let mut user_point = user_partial_note.to_note_hiding_point();\n\n        // 6. Set the public teardown function to `complete_refund(...)`. Public teardown is the only time when a public\n        // function has access to the final transaction fee, which is needed to compute the actual refund amount.\n        context.set_public_teardown_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"complete_refund(((Field,Field,bool)),((Field,Field,bool)),Field)\"),\n            [\n            fee_payer_point.inner.x, fee_payer_point.inner.y, fee_payer_point.inner.is_infinite as Field, user_point.inner.x, user_point.inner.y, user_point.inner.is_infinite as Field, funded_amount\n        ]\n        );\n    }\n\n    // TODO(#7728): even though the funded_amount should be a U128, we can't have that type in a contract interface due\n    // to serialization issues.\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn complete_refund(\n        // TODO(#7771): the following makes macros crash --> try getting it work once we migrate to metaprogramming\n        // mut fee_payer_point: TokenNoteHidingPoint,\n        // mut user_point: TokenNoteHidingPoint,\n        fee_payer_point_immutable: TokenNoteHidingPoint,\n        user_point_immutable: TokenNoteHidingPoint,\n        funded_amount: Field\n    ) {\n        // TODO(#7771): nuke the following 2 lines once we have mutable args\n        let mut fee_payer_point = fee_payer_point_immutable;\n        let mut user_point = user_point_immutable;\n\n        // TODO(#7728): Remove the next line\n        let funded_amount = U128::from_integer(funded_amount);\n        let tx_fee = U128::from_integer(context.transaction_fee());\n\n        // 1. We check that user funded the fee payer contract with at least the transaction fee.\n        // TODO(#7796): we should try to prevent reverts here\n        assert(funded_amount >= tx_fee, \"funded amount not enough to cover tx fee\");\n\n        // 2. We compute the refund amount as the difference between funded amount and tx fee.\n        let refund_amount = funded_amount - tx_fee;\n\n        // 3. We add fee to the fee payer point and refund amount to the user point.\n        fee_payer_point.add_amount(tx_fee);\n        user_point.add_amount(refund_amount);\n\n        // 4. We finalize the hiding points to get the note hashes.\n        let fee_payer_note_hash = fee_payer_point.finalize();\n        let user_note_hash = user_point.finalize();\n\n        // 5. At last we emit the note hashes.\n        context.push_note_hash(fee_payer_note_hash);\n        context.push_note_hash(user_note_hash);\n        // --> Once the tx is settled user and fee recipient can add the notes to their pixies.\n    }\n\n    /// Internal ///\n\n    // docs:start:increase_public_balance\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n    // docs:end:increase_public_balance\n\n    // docs:start:reduce_total_supply\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n\n    // docs:start:balance_of_private\n    unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.balance_of(owner).to_field()\n    }\n    // docs:end:balance_of_private\n}\n\n// docs:end:token_all\n"},"313":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    generators::{Ga1 as G_amt, Ga2 as G_npk, Ga3 as G_rnd, G_slot},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{\n    constants::GENERATOR_INDEX__NOTE_NULLIFIER, point::{Point, POINT_LENGTH}, scalar::Scalar,\n    hash::poseidon2_hash_with_separator, traits::Serialize\n},\n    note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app\n};\nuse dep::std::{embedded_curve_ops::multi_scalar_mul, hash::from_field_unsafe};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\nglobal TOKEN_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n#[aztec(note)]\nstruct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NoteInterface<TOKEN_NOTE_LEN, TOKEN_NOTE_BYTES_LEN> for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([note_hash_for_nullify, secret],GENERATOR_INDEX__NOTE_NULLIFIER)\n    }\n\n    fn compute_note_hiding_point(self) -> Point {\n        // We use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        let amount_scalar = from_field_unsafe(self.amount.to_integer());\n        let npk_m_hash_scalar = from_field_unsafe(self.npk_m_hash);\n        let randomness_scalar = from_field_unsafe(self.randomness);\n        let slot_scalar = from_field_unsafe(self.header.storage_slot);\n        // We compute the note hiding point as:\n        //     `G_amt * amount + G_npk * npk_m_hash + G_rnd * randomness + G_slot * slot`\n        // instead of using pedersen or poseidon2 because it allows us to privately add and subtract from amount\n        // in public by leveraging homomorphism.\n        multi_scalar_mul(\n            [G_amt, G_npk, G_rnd, G_slot],\n            [amount_scalar, npk_m_hash_scalar, randomness_scalar, slot_scalar]\n        )\n    }\n}\n\nimpl TokenNote {\n    // TODO: Merge this func with `compute_note_hiding_point`. I (benesjan) didn't do it in the initial PR to not have\n    // to modify macros and all the related funcs in it.\n    fn to_note_hiding_point(self) -> TokenNoteHidingPoint {\n        TokenNoteHidingPoint::new(self.compute_note_hiding_point())\n    }\n}\n\nstruct TokenNoteHidingPoint {\n  inner: Point\n}\n\nimpl TokenNoteHidingPoint {\n    fn new(point: Point) -> Self {\n        Self { inner: point }\n    }\n\n    fn add_amount(&mut self, amount: U128) {\n        self.inner = multi_scalar_mul([G_amt], [from_field_unsafe(amount.to_integer())]) + self.inner;\n    }\n\n    fn add_npk_m_hash(&mut self, npk_m_hash: Field) {\n        self.inner = multi_scalar_mul([G_npk], [from_field_unsafe(npk_m_hash)]) + self.inner;\n    }\n\n    fn add_randomness(&mut self, randomness: Field) {\n        self.inner = multi_scalar_mul([G_rnd], [from_field_unsafe(randomness)]) + self.inner;\n    }\n\n    fn add_slot(&mut self, slot: Field) {\n        self.inner = multi_scalar_mul([G_slot], [from_field_unsafe(slot)]) + self.inner;\n    }\n\n    fn finalize(self) -> Field {\n        self.inner.x\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TokenNoteHidingPoint {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) &\n        (self.npk_m_hash == other.npk_m_hash) &\n        (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self {\n            amount,\n            npk_m_hash: owner_npk_m_hash,\n            randomness: unsafe_rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"315":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{note_getter_options::PropertySelector, utils::compute_note_hash_for_nullify},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n// TRANSPARENT_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TRANSPARENT_NOTE_BYTES_LEN: Field = 2 * 32 + 64;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[aztec(note)]\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nstruct TransparentNoteProperties {\n    amount: PropertySelector,\n    secret_hash: PropertySelector,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN, TRANSPARENT_NOTE_BYTES_LEN> for TransparentNote {\n\n    // Custom serialization to avoid disclosing the secret field\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    // Custom deserialization since we don't have access to the secret plaintext\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        self.compute_nullifier_without_context()\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit. \n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n    // Custom serialization forces us to manually create the metadata struct and its getter\n    pub fn properties() -> TransparentNoteProperties {\n        TransparentNoteProperties {\n            amount: PropertySelector { index: 0, offset: 0, length: 32 },\n            secret_hash: PropertySelector { index: 1, offset: 0, length: 32 }\n        }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all"},"32":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"328":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/noir-contracts/contracts/token_portal_content_hash_lib/src/lib.nr","source":"// docs:start:mint_public_content_hash_nr\nuse dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner: AztecAddress, amount: Field) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes = owner.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0x3e87b9be keccak256('mint_public(bytes32,uint256)')\n    hash_bytes[0] = 0x3e;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xb9;\n    hash_bytes[3] = 0xbe;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field\n) -> Field {\n    let mut hash_bytes = [0; 68];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0xefa012c1 keccak256('mint_private(bytes32,uint256)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xa0;\n    hash_bytes[2] = 0x12;\n    hash_bytes[3] = 0xc1;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: EthAddress, amount: Field, caller_on_l1: EthAddress) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let caller_on_l1_bytes = caller_on_l1.to_field().to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = caller_on_l1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n"},"50":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"56":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"59":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            \n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"61":{"path":"/home/filip/c/aztec-token-bridge/packages/aztec-contracts/token_bridge/src/main.nr","source":"// docs:start:token_bridge_imports\n\n// Minimal implementation of the token bridge that can move funds between L1 <> L2.\n// The bridge has a corresponding Portal contract on L1 that it is attached to\n// And corresponds to a Token on L2 that uses the `AuthWit` accounts pattern.\n// Bridge has to be set as a minter on the token before it can be used\n\ncontract TokenBridge {\n    use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PublicMutable, SharedImmutable};\n\n    use dep::token_portal_content_hash_lib::{get_mint_public_content_hash, get_mint_private_content_hash, get_withdraw_content_hash};\n\n    use dep::token::Token;\n    // docs:end:token_bridge_imports\n\n    // docs:start:token_bridge_storage_and_constructor\n    // Storage structure, containing all storage, and specifying what slots they use.\n    #[aztec(storage)]\n    struct Storage {\n        token: PublicMutable<AztecAddress>,\n        portal_address: SharedImmutable<EthAddress>,\n    }\n\n    // Constructs the contract.\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(token: AztecAddress, portal_address: EthAddress) {\n        storage.token.write(token);\n        storage.portal_address.initialize(portal_address);\n    }\n    // docs:end:token_bridge_storage_and_constructor\n\n    #[aztec(private)]\n    fn get_portal_address() -> EthAddress {\n        storage.portal_address.read_private()\n    }\n\n    #[aztec(public)]\n    fn get_portal_address_public() -> EthAddress {\n        storage.portal_address.read_public()\n    }\n\n    // docs:start:claim_public\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount publicly\n    #[aztec(public)]\n    fn claim_public(to: AztecAddress, amount: Field, secret: Field, message_leaf_index: Field) {\n        let content_hash = get_mint_public_content_hash(to, amount);\n\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret,\n            storage.portal_address.read_public(),\n            message_leaf_index\n        );\n\n        // Mint tokens\n        Token::at(storage.token.read()).mint_public(to, amount).call(&mut context);\n    }\n    // docs:end:claim_public\n\n    // docs:start:exit_to_l1_public\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message publicly\n    // Requires `msg.sender` to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(public)]\n    fn exit_to_l1_public(\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: Field,\n        caller_on_l1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, caller_on_l1);\n        context.message_portal(storage.portal_address.read_public(), content);\n\n        // Burn tokens\n        Token::at(storage.token.read()).burn_public(context.msg_sender(), amount, nonce).call(&mut context);\n    }\n    // docs:end:exit_to_l1_public\n    // docs:start:claim_private\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount in private assets\n    // User needs to call token.redeem_shield() to get the private assets\n    #[aztec(private)]\n    fn claim_private(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field // secret used to consume the L1 to L2 message\n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount);\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret_for_L1_to_L2_message_consumption,\n            storage.portal_address.read_private()\n        );\n\n        // Mint tokens on L2\n        // `mint_private` on token is public. So we call an internal public function\n        // which then calls the public method on the token contract.\n        // Since the secret_hash is passed, no secret is leaked.\n        TokenBridge::at(context.this_address())._call_mint_on_token(amount, secret_hash_for_redeeming_minted_notes).enqueue(&mut context);\n    }\n    // docs:end:claim_private\n\n    // docs:start:exit_to_l1_private\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message privately\n    // Requires `msg.sender` (caller of the method) to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(private)]\n    fn exit_to_l1_private(\n        token: AztecAddress,\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: Field,\n        caller_on_l1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, caller_on_l1);\n        context.message_portal(storage.portal_address.read_private(), content);\n\n        // docs:start:call_assert_token_is_same\n        // Assert that user provided token address is same as seen in storage.\n        TokenBridge::at(context.this_address())._assert_token_is_same(token).enqueue(&mut context);\n        // docs:end:call_assert_token_is_same\n\n        // Burn tokens\n        Token::at(token).burn(context.msg_sender(), amount, nonce).call(&mut context);\n    }\n    /// docs:end:exit_to_l1_private\n\n    // docs:start:get_token\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_token() -> AztecAddress {\n        storage.token.read()\n    }\n    // docs:end:get_token\n\n    // docs:start:call_mint_on_token\n    // This is a public call as we need to read from public storage.\n    // Also, note that user hashes their secret in private and only sends the hash in public\n    // meaning only user can `redeem_shield` at a later time with their secret.\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _call_mint_on_token(amount: Field, secret_hash: Field) {\n        Token::at(storage.token.read()).mint_private(amount, secret_hash).call(&mut context);\n    }\n    // docs:end:call_mint_on_token\n\n    // docs:start:assert_token_is_same\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _assert_token_is_same(token: AztecAddress) {\n        assert(storage.token.read().eq(token), \"Token address is not the same as seen in storage\");\n    }\n    // docs:end:assert_token_is_same\n}\n"},"62":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/messaging.nr","source":"use crate::{\n    hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness\n};\n\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::{constants::L1_TO_L2_MSG_TREE_HEIGHT, address::{AztecAddress, EthAddress}, utils::arr_copy_slice};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_message_hash(\n        portal_contract_address,\n        chain_id,\n        storage_contract_address,\n        version,\n        content,\n        secret_hash\n    );\n\n    let returned_message = get_l1_to_l2_membership_witness(storage_contract_address, message_hash, secret);\n    let leaf_index = returned_message[0];\n    let sibling_path = arr_copy_slice(returned_message, [0; L1_TO_L2_MSG_TREE_HEIGHT], 1);\n\n    // Check that the message is in the tree\n    // This is implicitly checking that the values of the message are correct\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert(root == l1_to_l2_root, \"Message not in state\");\n\n    compute_message_nullifier(message_hash, secret, leaf_index)\n}\n"},"81":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32, let M: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the \n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the \n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from \n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"89":{"path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.50.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once. \n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"}}}